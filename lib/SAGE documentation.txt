***************************************
** SAGE library V1.2408
** Functions reference
** August 2024
*****************************************

WARNING !!! SAGE library is still in a development phase, some functions can change in future versions.

0 - Distribution
lib/ : the SAGE static library in 3 formats sage_debug.lib (debug log activated), sage_safe.lib (check for null pointer)
       and sage.lib (faster version with no debug and no check)
include/sage/ : all includes for compiling your projects
tutorial : some tutorials to SAGE functions
demos : demos of SAGE in action

1 - Library management functions

- BOOL SAGE_Init(LONG modules) : init the SAGE library and activate modules, return TRUE on success, FALSE on error.
  Available modules : SMOD_NONE           - No module, only core functions (logs, memory, errors, thread)
                      SMOD_VIDEO          - Video module (screen, layers, sprites, tiles)
                      SMOD_AUDIO          - Audio module (music & sound)
                      SMOD_INPUT          - Input module (keyboard, mouse & joystick)
                      SMOD_INTERRUPTION   - Interruption module (Timer & IT)
                      SMOD_NETWORK        - Network module (UDP & TCP sockets)
                      SMOD_3D             - 3D render module (texture mapping)
- BOOL SAGE_Exit(VOID) : exit SAGE library and release all resources, return TRUE on success, FALSE on error.
- BOOL SAGE_LoadedModule(LONG module) : tell if a module has been loaded.
- STRPTR SAGE_GetVersion(VOID) : return the library version string.
- VOID SAGE_UseAMMX(BOOL activate) : activate/deactivate the AMMX acceleration.
- VOID SAGE_Pause(ULONG ticks) : pause the program for ticks*1/50 of seconds.


2 - Error management functions

- VOID SAGE_SetError(LONG error) : set the current error code.
- LONG SAGE_GetErrorCode(VOID) : get the last error code.
- STRPTR SAGE_GetErrorString(VOID) : get the last error string.
- VOID SAGE_DisplayError(VOID) : display the last error in console.


3 - Console log functions

- VOID SAGE_SetLogLevel(LONG level) : set the application log level.
  Available levels : SLOG_ALL          - Activate all level
                     SLOG_TRACE        - Trace level
                     SLOG_DEBUG        - Debug level
                     SLOG_INFO         - Information level
                     SLOG_WARNING      - Warning level
                     SLOG_ERROR        - Error level
                     SLOG_FATAL        - Fatal level
                     SLOG_OFF          - Desactivate all level
                     SLOG_APPLICATION  - Application level is not maskable
- VOID SAGE_AppliLog(char *format, args...) : Display application log in console.
- VOID SAGE_FatalLog(char *format, args...);
- VOID SAGE_ErrorLog(char *format, args...);
- VOID SAGE_WarningLog(char *format, args...);
- VOID SAGE_InfoLog(char *format, args...);
- VOID SAGE_DebugLog(char *format, args...);
- VOID SAGE_TraceLog(char *format, args...);
- BOOL SAGE_HasLogLevel(LONG level) : tell if the log level is active.


4 - Memory management functions

- APTR SAGE_AllocMem(ULONG size) : allocate public memory bloc, return NULL on error.
- APTR SAGE_AllocAlignMem(ULONG size, ULONG align) : allocate aligned public memory bloc, return NULL on error.
- APTR SAGE_AllocChipMem(ULONG size) : allocate chip memory bloc, return NULL on error.
- APTR SAGE_AllocAlignChipMem(ULONG size, ULONG align) : allocate aligned chip memory bloc, return NULL on error.
- APTR SAGE_AllocFastMem(ULONG size) : allocate fast memory bloc, return NULL on error.
- APTR SAGE_AllocAlignFastMem(ULONG size, ULONG align) : allocate aligned fast memory bloc, return NULL on error.
- VOID SAGE_FreeMem(APTR bloc) : release a memory bloc.
- VOID SAGE_ReleaseMem(VOID) : release all reserved memory.
- VOID SAGE_DumpMemory(VOID) : dump the memory list in console.
- ULONG SAGE_AvailMem(VOID) : return the available memory size.
- ULONG SAGE_AvailChipMem(VOID) : return the available chip memory size.
- ULONG SAGE_AvailFastMem(VOID) : return the available fast memory size.


5 - Timer functions

- SAGE_Timer * SAGE_AllocTimer(VOID) : allocate a timer.
- VOID SAGE_ReleaseTimer(SAGE_Timer *timer) : release a timer.
- BOOL SAGE_GetSysTime(SAGE_Timer *timer) : get the system time (seconds & microseconds) in the timer structure, return FALSE on error.
- ULONG SAGE_ElapsedTime(SAGE_Timer *timer) : get the elapsed time between two calls (12 bits for seconds & 20 bits for microseconds).
- BOOL SAGE_Delay(SAGE_Timer *timer, ULONG duration) : wait for a certain duration  (12 bits for seconds & 20 bits for microseconds).


6 - Thread functions

** Warning : actually you can't use log functions in a thread.
- SAGE_Thread * SAGE_CreateThread(LONG (*fn)(APTR), APTR userdata) : create a thread with the function fn and pass it the userdata, you can create up to 8 thread at a time.
- VOID SAGE_WaitThread(SAGE_Thread *thread) : wait for a thread to finish.
- VOID SAGE_KillThread(SAGE_Thread *thread) : send a break signal to a thread.
- BOOL SAGE_RemoveThread(SAGE_Thread *thread) : remove a thread from the thread list.
- BOOL SAGE_BreakThread(VOID) : check if the current thread has receive a break signal.


7 - Vampire functions

- BOOL SAGE_ApolloPresence(VOID) : check if vampire card is present.
- BOOL SAGE_AMMX2Available(VOID) : check if AMMX extension is available.
- BOOL SAGE_SetVampireFrameBuffer(APTR adr) : set the vampire frame buffer address (prefer the system function), return FALSE on error.
- APTR SAGE_GetVampireFrameBuffer(VOID) : get the vampire frame buffer address.


8 - Configuration file functions

- BOOL SAGE_GetParameterFromFile(STRPTR filename, STRPTR section, STRPTR parameter, STRPTR default, STRPTR buffer, LONG size) : get a parameter value from a config file
- SAGE_Configuration *SAGE_LoadConfigurationFile(STRPTR filename) : load a configuration file
- BOOL SAGE_SaveConfigurationFile(SAGE_Configuration *config, STRPTR filename, STRPTR header) : save a configuration file
- VOID SAGE_ReleaseConfigurationFile(SAGE_Configuration *config) : release a configuration file
- STRPTR SAGE_GetParameterValue(SAGE_Configuration *config, STRPTR section, STRPTR parameter, STRPTR default) : get a parameter value from a config
- BOOL SAGE_SetParameterValue(SAGE_Configuration *config, STRPTR section, STRPTR name, STRPTR value) : set a parameter value to a config


9 - Video functions

 a) Screen
- BOOL SAGE_IsSupportedPixFormat(ULONG pixformat) : tell if a pixel format is supported.
  Supported format : PIXFMT_CLUT
                     PIXFMT_RGB15
                     PIXFMT_RGB16
                     PIXFMT_RGB16PC
                     PIXFMT_RGB24
                     PIXFMT_BGR24
                     PIXFMT_ARGB32
                     PIXFMT_RGBA32
- BOOL SAGE_OpenScreen(LONG width, LONG height, LONG depth, LONG flags) : open a screen of width*height pixels in depth bits (8, 16, 24 or 32) with special flags.
  Available flags : SSCR_DOUBLEBUF        - Activate double buffer (default choice)
                    SSCR_TRIPLEBUF        - Activate triple buffer
                    SSCR_STRICTRES        - Open only the requested resolution
                    SSCR_NOWINDOWEVT      - Don't listen for window events
                    SSCR_TRACKMOUSE       - Track mouse movements
                    SSCR_DELTAMOUSE       - Report delta mouse move instead of absolute coordinates
                    SSCR_INDIRECT         - Activate indirect rendering (experimental)
- SAGE_Screen *SAGE_GetScreen(VOID) : return the SAGE screen structure (don't use it directly)
- BOOL SAGE_CloseScreen(VOID) : close the screen, return FALSE on error.
- BOOL SAGE_ClearScreen(VOID) : clear the screen (fill with color 0), return FALSE on error.
- BOOL SAGE_SetScreenClip(ULONG left, ULONG top, ULONG width, ULONG height) : set the clipping view, return FALSE on error.
- BOOL SAGE_ClearView(VOID) : clear the current clipping view, return FALSE on error.
- BOOL SAGE_ClearArea(ULONG left, ULONG top, ULONG width, ULONG height) : clear a part of the screen, return FALSE on error.
- BOOL SAGE_VerticalSynchro(BOOL sync) : activate/deactivate the vertical synchronization, return FALSE on error.
- BOOL SAGE_MaximumFPS(ULONG fps) : set the maximum frame per second if vertical synchro is deactivate (default 30), return FALSE on error.
- BOOL SAGE_RefreshScreen(VOID) : refresh the screen view, switch the screen buffers, return FALSE on error.
- VOID SAGE_WaitVbl(VOID) : wait for vertical blank.
- SAGE_Event *SAGE_GetEvent(VOID) : get the screen's window events (non blocking).
- BOOL SAGE_IsFrontMostScreen(VOID) : tell if our screen is in front.
- SAGE_Bitmap *SAGE_GetFrontBitmap(VOID) : get the bitmap of the front screen buffer.
- SAGE_Bitmap *SAGE_GetBackBitmap(VOID) : get the bitmap of the back screen buffer.
- ULONG SAGE_GetPixelFormat(VOID) : get the screen pixel format.
- BOOL SAGE_RefreshColors(UWORD start, UWORD len) : refresh the screen colors from start color for len colors, return FALSE on error.
- BOOL SAGE_SetColor(UWORD index, ULONG color) : set a screen color value, you should RefreshColors to see it, return FALSE on error.
- BOOL SAGE_SetColorMap(ULONG *colors, UWORD start, UWORD len) : set multiple screen color values, you should RefreshColors to see them, return FALSE on error.
- ULONG SAGE_GetColor(UWORD index) : get a screen color value (for CLUT pixel format).
- BOOL SAGE_SetDrawColor(ULONG back, ULONG front) : set the back and front color, return FALSE on error.
- BOOL SAGE_HideMouse(VOID) : hide the mouse pointer, return FALSE on error.
- BOOL SAGE_ShowMouse(VOID) : show the mouse pointer, return FALSE on error.
- BOOL SAGE_TrackMouse(BOOL activate) : activate/deactivate the mouse movement tracking.
- BOOL SAGE_SetFont(STRPTR font, UWORD size) : set the active font of size, return FALSE on error.
- BOOL SAGE_SetTextColor(UBYTE front, UBYTE back) : set the text colors, return FALSE on error.
- BOOL SAGE_SetDrawingMode(UBYTE mode) : set the text drawing mode (SSCR_TXTTRANSP or SSCR_TXTREPLACE), return FALSE on error.
- BOOL SAGE_PrintText(STRPTR text, UWORD left, UWORD top) : print a text at a screen position (on back buffer), return FALSE on error.
- BOOL SAGE_PrintFText(UWORD left, UWORD top, STRPTR ftext, ...) : print a formatted text at a screen position (on back buffer), return FALSE on error.
- BOOL SAGE_PrintDirectText(STRPTR text, UWORD left, UWORD top) : print a text at screen position (on front buffer), return FALSE on error.
- BOOL SAGE_PrintDirectFText(UWORD left, UWORD top, STRPTR ftext, ...) : print a formatted text at screen position (on front buffer), return FALSE on error.
- BOOL SAGE_EnableFrameCount(BOOL flag) : enabale the frame rate counter (module SMOD_INTERRUPTION should be activated), return FALSE on error.
- UWORD SAGE_GetFps(VOID) : get the frame rate value (frame per second).

 b) Pictures
- VOID SAGE_AutoRemapPicture(BOOL flag) : enable/disable the picture auto remap feature (enable by default)
- SAGE_Picture *SAGE_LoadPicture(STRPTR picture) : load a picture and remap it to screen pixel format (use datatypes), return NULL on error.
- BOOL SAGE_SetPictureTransparency(SAGE_Picture *picture, ULONG color) : set the transparent color of a picture, return FALSE on error.
- BOOL SAGE_LoadPictureColorMap(SAGE_Picture *picture) : load picture colormap into screen colors, return FALSE on error.
- BOOL SAGE_BlitPictureToScreen(SAGE_Picture *picture, ULONG left, ULONG top, ULONG width, ULONG height, ULONG x, ULONG y) : copy a part of a picture to a screen position, return FALSE on error.
 
 c) Layers
** A layer is a buffer that support wrap technic, imagine you have a layer of 300*300, you can set a view like 100,100,300,300 and library will automatically clip on the right side and copy the missing pixels from the left side
- BOOL SAGE_CreateLayer(UWORD index, ULONG width, ULONG height) : create a new layer of width*height at index (you have 32 available layers), return FALSE on error.
- BOOL SAGE_CreateLayerFromPicture(UWORD index, SAGE_Picture *picture) : create a layer directly from a picture, return FALSE on error.
- BOOL SAGE_ReleaseLayer(UWORD index) : release layer resources, return FALSE on error.
- BOOL SAGE_SetLayerView(UWORD index, ULONG left, ULONG top, ULONG width, ULONG height) : set the active view of the layer, return FALSE on error.
- BOOL SAGE_SetLayerTransparency(UWORD index, ULONG color) : set the transparent color of the layer, return FALSE on error.
- BOOL SAGE_BlitPictureToLayer(SAGE_Picture * picture, ULONG left, ULONG top, ULONG width, ULONG height, UWORD index, ULONG x, ULONG y) : copy a part of a picture to a layer position, return FALSE on error.
- BOOL SAGE_BlitLayerToScreen(UWORD index, ULONG x, ULONG y) : copy the current layer view to a screen position, return FALSE on error.

 d) Sprites
- BOOL SAGE_CreateSpriteBank(UWORD index, UWORD nb, SAGE_Picture *picture) : create the sprite bank at index (you have 64 available banks) of nb sprites from picture, return FALSE on error.
- BOOL SAGE_ReleaseSpriteBank(UWORD index) : release a sprite bank and all the resources, return FALSE on error.
- BOOL SAGE_SetSpriteBankTransparency(UWORD index, ULONG color) : set the sprite bank transparent color, return FALSE on error.
- BOOL SAGE_AddSpriteToBank(UWORD index, UWORD sprite, ULONG left, ULONG top, ULONG width, ULONG height, UWORD hotspot) : add a sprite to the sprite bank, return FALSE on error.
- BOOL SAGE_SetSpriteHotspot(UWORD index, UWORD sprite, UWORD hotspot) : set the sprite hotspot, return FALSE on error.
- BOOL SAGE_BlitSpriteToScreen(UWORD index, UWORD sprite, LONG x, LONG y) : copy the sprite of a sprite bank to a screen position, return FALSE on error.
- BOOL SAGE_SetSpriteZoom(UWORD index, UWORD sprite, FLOAT zoom_x, FLOAT zoom_y) : set the sprite X & Y zoom factors, return FALSE on error.

 e) Primitives
- BOOL SAGE_DrawClippedPixel(LONG x, LONG y, LONG color) : draw a clipped pixel at x,y with color on the back bitmap, return FALSE on error.
- BOOL SAGE_DrawPixel(LONG x, LONG y, LONG color) : draw a pixel at x,y with color on the back bitmap, return FALSE on error.
- BOOL SAGE_DrawPixelArray(SAGE_Pixel *pixels, ULONG nbpixels) : draw an array of nbpixels pixels on the back bitmap, return FALSE on error.
- BOOL SAGE_DrawClippedLine(LONG x1, LONG y1, LONG x2, LONG y2, LONG color) : not yet available
- BOOL SAGE_DrawLine(LONG x1, LONG y1, LONG x2, LONG y2, LONG color) : draw a line from x1,y1 to x2,y2 with color on the back bitmap, return FALSE on error.
- BOOL SAGE_DrawLineStrip(SAGE_Pixel *lines, ULONG nblines) : not yet available
- BOOL SAGE_DrawLineArray(SAGE_Line *lines, ULONG nblines) : not yet available
- BOOL SAGE_DrawTriangle(LONG x1, LONG y1, LONG x2, LONG y2, LONG x3, LONG y3, LONG color) : draw a triangle with color on the back bitmap, return FALSE on error.
- BOOL SAGE_DrawClippedTriangle(LONG x1, LONG y1, LONG x2, LONG y2, LONG x3, LONG y3, LONG color) : draw a clipped triangle with color on the back bitmap, return FALSE on error.

 f) Tiles
- BOOL SAGE_CreateTileBank(UWORD index, UWORD tilewidth, UWORD tileheight, UWORD size, SAGE_Picture *picture) : create a tilebank at index from a picture with size tiles of tilewidth*tileheight, return FALSE on error.
- BOOL SAGE_ReleaseTileBank(UWORD index) : release a tile bank and all resources, return FALSE on error.

 g) Tilemap
* Still in progress


10 - Audio functions

 a) Music
** Music functions support trackmod and aiff files.
- SAGE_Music *SAGE_LoadMusic(STRPTR filename) : load a music file, return NULL on error.
- VOID SAGE_ReleaseMusic(SAGE_Music *music) : release the music resource.
- BOOL SAGE_AddMusic(UWORD index, SAGE_Music *music) : add a music to the music bank (you have 32 music slots available), return FALSE on error.
- SAGE_Music * SAGE_RemoveMusic(UWORD index) : remove the music from the music bank slot, return the music structure.
- BOOL SAGE_FreeMusic(UWORD index) : remove the music from the bank slot and release the music resource, return FALSE on error.
- BOOL SAGE_ClearMusic(VOID) : remove and release all musics from music banks, return FALSE on error.
- BOOL SAGE_PlayMusic(UWORD index) : play the music of the bank slot, return FALSE on error.
- BOOL SAGE_StopMusic(VOID) : stop the current music, return FALSE on error.
- BOOL SAGE_PauseMusic(VOID) : pause the current music (only available for mod files), return FALSE on error.
- BOOL SAGE_ResumeMusic(VOID) : resume the current music (only available for mod files), return FALSE on error.

 b) Sound
** Sound functions support 8svx, aiff and wave files.
- SAGE_Sound *SAGE_LoadSound(STRPTR filename) : load a sound sample, return NULL on error.
- VOID SAGE_ReleaseSound(SAGE_Sound *sound) : release the sound resource.
- BOOL SAGE_AddSound(UWORD index, SAGE_Sound *sound) : add the sound in the sound bank (you have 128 sound slots available), return FALSE on error.
- SAGE_Sound *SAGE_RemoveSound(UWORD index) : remove the sound from the bank slot, return the sound structure.
- BOOL SAGE_FreeSound(UWORD index) : remove the sound from the bank slot and release the sound resource, return FALSE on error.
- BOOL SAGE_ClearSound(VOID) : remove and release all sounds from sound bank, return FALSE on error.
- BOOL SAGE_PlaySound(UWORD index, UWORD channel) : play the sound of the bank slot on the channel, return FALSE on error.


11 - Input functions
- BOOL SAGE_HandleInputEvents(VOID) : handle all input events, return FALSE on error.

 a) Keyboard
- BOOL SAGE_ScanKeyboard(SAGE_KeyScan *keys, UBYTE nbkey) : scan nbkey of the keyboard defined in keys, return FALSE on error.
- BOOL SAGE_AddKeyboardHandler(UWORD keycode, VOID (*handler)(BOOL)) : add and handler on the keycode event, return FALSE on error.
- BOOL SAGE_RemoveKeyboardHandler(UWORD keycode) : remove the handler of the keycode event, return FALSE on error.
- BOOL SAGE_ClearKeyboardHandlers(VOID) : clear all keyboard handlers, return FALSE on error.
- BOOL SAGE_InstallKeyboardHandlers(VOID) : prepare all keyboard handlers, return FALSE on error.

 b) Joyport
- UWORD SAGE_GetPortType(UWORD port) : return the type of device connected to the port.
  Type could be : SINP_NOTAVAIL         nothing connected
                  SINP_MOUSE            mouse connected
                  SINP_JOYSTICK         joystick connected
                  SINP_GAMEPAD          gamepad connected
                  SINP_UNKNOWN          unknown device
- BOOL SAGE_ScanPort(SAGE_PortScan *scan, UWORD port) : scan the port and get the port state, return FALSE on error.
- BOOL SAGE_AddJoyportHandler(UWORD port, VOID (*handler)(SAGE_PortScan * scan)) : add an handler on the joyport port, return FALSE on error.
- BOOL SAGE_RemoveJoyportHandler(UWORD port) : remove the handler of the joyport port, return FALSE on error.
- BOOL SAGE_ClearJoyportHandlers(VOID) : clear all handlers of joyport, return FALSE on error.


12 - Interruption functions
- BOOL SAGE_AddInterruptionHandler(UWORD index, VOID ASM (*f)(REG(a5, APTR)), APTR userdata) : create a new interruption handler (you have 8 handlers available), return FALSE on error.
- BOOL SAGE_RemoveInterruptionHandler(UWORD index) : remove an interruption handler, return FALSE on error.
- BOOL SAGE_StartInterruption(UWORD index, UWORD ticks) : start interruption each tick (1 tick = 0,05 second), return FALSE on error.
- BOOL SAGE_StopInterruption(UWORD index) : stop an interruption, return FALSE on error.
- BOOL SAGE_StopAllInterruptions(VOID) : stop all running interruptions, return FALSE on error.


13 - Network functions

- SAGE_BsdSocket *SAGE_OpenServer(UWORD protocol, UWORD port) : create a server of protocol (SNET_TCP_PROTOCOL or SNET_UDP_PROTOCOL) on port, return NULL on error.
- SAGE_BsdSocket *SAGE_OpenClient(UWORD protocol, STRPTR ip, UWORD port) : create a client of protocol to ip and port, return NULL on error.
- BOOL SAGE_CloseSocket(SAGE_BsdSocket *socket) : close a socket, return FALSE on error.
- BOOL SAGE_SetNonBlockingSocket(SAGE_BsdSocket *socket, BOOL flag) : set a socket to non blocking mode, return FALSE on error.
- SAGE_BsdSocket *SAGE_AcceptClient(SAGE_BsdSocket *socket) : accept a new client from a server socket, return NULL on error.
- LONG SAGE_SendData(SAGE_BsdSocket *socket, APTR data, LONG len) : send data of len to a socket, return data size sent.
- LONG SAGE_ReceiveData(SAGE_BsdSocket *socket, APTR buffer, LONG len) : receive data from a socket, return data size received.
- LONG SAGE_SendString(SAGE_BsdSocket *socket, STRPTR text) : send a string to a socket, return string len sent.
- LONG SAGE_ReceiveString(SAGE_BsdSocket *socket, STRPTR buffer, LONG len) : receive  a string from a socket, return string len received.
- LONG SAGE_GetLastNetworkError(VOID) : get the last network error.
- LONG SAGE_GetLastSocketError(SAGE_BsdSocket *socket) : get the last socket error.


14 - 3D functions

 a) Rendering
- BOOL SAGE_EnableZBuffer(BOOL flag) : enable or disable the z-buffering support
- BOOL SAGE_Get3DRenderOption(LONGBITS option) : get the status of a render option
- BOOL SAGE_Set3DRenderMode(UWORD mode) : set the rendering mode between internal (S3DD_S3DRENDER), Maggie (S3DD_M3DRENDER) or Warp3D (S3DD_W3DRENDER)
- UWORD SAGE_Get3DRenderSystem() : return the current 3D render system
- BOOL SAGE_Push3DElement(SAGE_3DElement *element) : push an element to the rendering queue
- VOID SAGE_Sort3DElements(VOID) : sort the elements in the rendering queue (automatically called if z-buffer is disabled)
- BOOL SAGE_Render3DElements(VOID) : render all elements in the rendering queue

 b) Texture management
- BOOL SAGE_CreateTextureFromFile(UWORD index, STRPTR file_name) : create a texture directly from a file
- BOOL SAGE_CreateTextureFromPicture(UWORD index, UWORD left, UWORD top, UWORD size, SAGE_Picture *picture) : create a texture from a picture
- SAGE_3DTexture *SAGE_GetTexture(UWORD index) : get a texture from her index
- W3D_Texture *SAGE_GetW3DTexture(UWORD index) : get a Warp3D texture from her index
- M3D_Texture *SAGE_GetM3DTexture(WORD index) : get a Maggie3D texture from her index
- WORD SAGE_GetFreeTextureIndex(VOID) : get the next free index in texture bank
- UWORD SAGE_GetTextureSize(UWORD index) : return the size of a texture
- APTR SAGE_GetTextureBuffer(UWORD index) : get the texture buffer
- BOOL SAGE_ReleaseTexture(UWORD index) : release a texture
- BOOL SAGE_AddTexture(UWORD index) : add a texture to the card memory (W3D feature)
- BOOL SAGE_RemoveTexture(UWORD index) : remove a texture from the card memory (W3D feature)
- BOOL SAGE_FlushTextures(VOID) : flush all textures from card (W3D feature)
- BOOL SAGE_SetTextureTransparency(UWORD index, ULONG color) : set the color transparency of a texture


15 - 3D engine (work in progress)

  a) Core
- BOOL SAGE_InitEngine(VOID) : init the 3D engine
- VOID SAGE_Release3DEngine(VOID) : release 3D engine resources
- VOID SAGE_RenderWorld(VOID) : render the 3D world
- SAGE_EngineMetrics *SAGE_GetEngineMetrics(VOID) : get the engine metrics

  b) Camera management
- BOOL SAGE_AddCamera(ULONG index, LONG left, LONG top, LONG width, LONG height) : add a camera to the world
- VOID SAGE_RemoveCamera(ULONG index) : remove the camera from the world
- SAGE_Camera *SAGE_GetCamera(ULONG index) : get the camera from her index
- BOOL SAGE_SetActiveCamera(ULONG index) : set the active camera
- BOOL SAGE_SetCameraAngle(ULONG index, WORD ax, WORD ay, WORD az) : set the camera angles
- BOOL SAGE_RotateCamera(ULONG index, WORD dax, WORD day, WORD daz) : rotate the camera
- BOOL SAGE_SetCameraPosition(ULONG index, FLOAT px, FLOAT py, FLOAT pz) : set the camera position
- BOOL SAGE_MoveCamera(ULONG index, FLOAT dpx, FLOAT dpy, FLOAT dpz) : move the camera 
- BOOL SAGE_SetCameraView(ULONG index, LONG left, LONG top, LONG widht, LONG height, WORD fov) : set the camera view
- BOOL SAGE_SetCameraPlane(ULONG index, FLOAT np, FLOAT fp) : set the camera planes

  c) Entity management
- SAGE_Entity *SAGE_CreateEntity(UWORD nv, UWORD nf) : create an empty entity with nv vertices and nf faces
- VOID SAGE_InitEntity(SAGE_Entity *entity) : initialize the entity (calcul normals, radius, etc...)
- SAGE_Entity *SAGE_CloneEntity(SAGE_Entity *entity) : clone and existing entity
- VOID SAGE_ReleaseEntity(SAGE_Entity *entity) : Release an entity
- SAGE_Entity *SAGE_LoadEntity(STRPTR filename) : Load an entity from a file (support OBJ and LWO type)
- VOID SAGE_SetEntityRadius(SAGE_Entity *entity) : calculate the entity radius
- VOID SAGE_SetEntityNormals(SAGE_Entity *entity) : calculate the entity faces normals
- BOOL SAGE_AddEntity(UWORD index, SAGE_Entity *entity) : add an entity to the world, you can add up to 1024 entities to the world
- VOID SAGE_RemoveEntity(UWORD index) : remove entity from the world
- VOID SAGE_FlushEntities(VOID) : remove all entities from the worl
- SAGE_Entity *SAGE_GetEntity(UWORD index) : get an entity from her index
- BOOL SAGE_SetEntityAngle(UWORD index, WORD ax, WORD ay, WORD az) : set the entity angle
- BOOL SAGE_RotateEntity(UWORD index, WORD dax, WORD day, WORD daz) : rotate the entity
- BOOL SAGE_SetEntityPosition(UWORD index, FLOAT px, FLOAT py, FLOAT pz) : set the entity position
- BOOL SAGE_MoveEntity(UWORD index, FLOAT dpx, FLOAT dpy, FLOAT dpz) : move the entity 
- BOOL SAGE_HideEntity(UWORD index) : hide the entity, remove it from the rendering pipeline
- BOOL SAGE_ShowEntity(UWORD index) : show the entity, add it to the rendering pipeline
- BOOL SAGE_SetEntityTexture(UWORD index, UWORD mat, UWORD tex, UWORD mode) : update entity textures (used by entity loader)

  d) Material management
- VOID SAGE_ReleaseMaterial(SAGE_Material *material) : release a material
- BOOL SAGE_AddMaterial(STRPTR file, STRPTR name, LONG left, LONG top, LONG size, LONG index) : add a single material to the world
- BOOL SAGE_AddMaterials(SAGE_Material *materials, LONG nb)  : add multiple (nb) materials to the world
- BOOL SAGE_LoadMaterials(VOID) : load all materials to the card memory if needed
- VOID SAGE_FlushMaterials(VOID) : flush all materials from the card memory if needed
  
  e) Skybox management
- VOID SAGE_SetSkyboxTextures(ULONG front, ULONG back, ULONG left, ULONG right, ULONG top, ULONG bottom) : set the skybox textures for each plane
- VOID SAGE_EnableSkybox(BOOL flag) : enable or disable the skybox rendering
  
  f) Terrain management (still in dev, lot's of bugs)
- VOID SAGE_SetZoneRadius(SAGE_Zone *zone) : calculate the zone radius
- VOID SAGE_SetZoneNormals(SAGE_Zone *zone) : calculate the zone faces normals
- BOOL SAGE_LoadHeightmapTerrain(STRPTR hm, STRPTR cm, STRPTR tm) : load a heightmap terrain with optionally a color map file and texture map file
- VOID SAGE_SetHeighmapCellSize(FLOAT size) : set the size of a zone cell (default is 4.0)
- VOID SAGE_SetHeightmapZoom(FLOAT zoom) : set the zoom Y value of a heightmap (default is 1.0)
- VOID SAGE_ReleaseTerrain(VOID) : release a terrain and free all resources
